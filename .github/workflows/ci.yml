name: Continuous Integration

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  CARGO_TERM_COLOR: always

jobs:
  # build-and-test:

  #   name: Build and Test - ${{ matrix.job.os }} (${{ matrix.job.target }})
  #   runs-on: ${{ matrix.job.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       job:
  #         - { os: ubuntu-20.04, target: arm-unknown-linux-gnueabihf , use-cross: true }
  #         - { os: ubuntu-20.04, target: arm-unknown-linux-musleabihf, use-cross: true }
  #         - { os: ubuntu-20.04, target: aarch64-unknown-linux-gnu   , use-cross: true }
  #         - { os: ubuntu-20.04, target: i686-unknown-linux-gnu      , use-cross: true }
  #         - { os: ubuntu-20.04, target: i686-unknown-linux-musl     , use-cross: true }
  #         - { os: ubuntu-20.04, target: x86_64-unknown-linux-gnu    }
  #         - { os: ubuntu-20.04, target: x86_64-unknown-linux-musl   , use-cross: true }
  #         - { os: macos-10.15 , target: x86_64-apple-darwin         }
  #         # - { os: windows-2019, target: i686-pc-windows-gnu         }  ## disabled; error: linker `i686-w64-mingw32-gcc` not found
  #         - { os: windows-2019, target: i686-pc-windows-msvc        }
  #         - { os: windows-2019, target: x86_64-pc-windows-gnu       }
  #         - { os: windows-2019, target: x86_64-pc-windows-msvc      }

  #   steps:

  #     - name: Checkout repository
  #       uses: actions/checkout@v2

  #     - name: Install rust toolchain (stable)
  #       uses: actions-rs/toolchain@v1
  #       with:
  #           target: ${{ matrix.job.target }}
  #           toolchain: stable
  #           override: true
  #           components: rustfmt, clippy

  #     - name: Check syntax with `cargo check`
  #       uses: actions-rs/cargo@v1
  #       with:
  #         command: check

  #     - name: Check good practices with `cargo clippy`
  #       uses: actions-rs/cargo@v1
  #       with:
  #         command: clippy
  #         args: --locked --all-targets --all-features

  #     - name: Check formatting with `cargo fmt`
  #       uses: actions-rs/cargo@v1
  #       with:
  #         command: fmt
  #         args: --all -- --check

  #     - name: Build   
  #       uses: actions-rs/cargo@v1
  #       with:
  #         use-cross: ${{ matrix.job.use-cross }}
  #         command: build
  #         args: --locked --release --all-features --target=${{ matrix.job.target }}

  #     - name: Run tests
  #       uses: actions-rs/cargo@v1
  #       with:
  #         command: test
  #         args: --locked

  github-release:

    name: Create GitHub release
    #needs: build-and-test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create dummy files
        shell: bash
        run: |
          mkdir output
          echo "This is file 1" > output/file-1.txt
          echo "This is file 2" > output/file-2.txt

      - name: Upload File 1
        uses: actions/upload-artifact@v3
        with:
          name: binaries/
          path: output/file-1.txt

      - name: Upload File 2
        uses: actions/upload-artifact@v3
        with:
          name: binaries/
          path: output/file-1.txt

      - uses: actions/download-artifact@v3
        with:
          name: binaries/
          path: downloaded-binaries/

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: downloaded-binaries/
        
      # - name: Create GitHub release from rust cargo
      #   id: create_rust_release
      #   uses: gabrielmagno/rust-release@master
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Upload binaries to release
      #   uses: svenstaro/upload-release-action@v2
      #   with:
      #     repo_token: ${{ secrets.GITHUB_TOKEN }}
      #     file: output/*
      #     tag: ${{ steps.create_rust_release.outputs.tag_name }}
      #     overwrite: true
      #     file_glob: true

      # - name: Upload release binaries
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     files: output/*

      # - name: Upload release archive
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_rust_release.outputs.upload_url }}
      #     asset_path: output
      #     asset_name: output
      #     asset_content_type: application/octet-stream
